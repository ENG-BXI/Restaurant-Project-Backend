
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `customerReview` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model customerReview
 * 
 */
export type customerReviewModel = runtime.Types.Result.DefaultSelection<Prisma.$customerReviewPayload>

export type AggregateCustomerReview = {
  _count: CustomerReviewCountAggregateOutputType | null
  _avg: CustomerReviewAvgAggregateOutputType | null
  _sum: CustomerReviewSumAggregateOutputType | null
  _min: CustomerReviewMinAggregateOutputType | null
  _max: CustomerReviewMaxAggregateOutputType | null
}

export type CustomerReviewAvgAggregateOutputType = {
  numberOfStar: number | null
}

export type CustomerReviewSumAggregateOutputType = {
  numberOfStar: number | null
}

export type CustomerReviewMinAggregateOutputType = {
  id: string | null
  numberOfStar: number | null
  text: string | null
  authorName: string | null
}

export type CustomerReviewMaxAggregateOutputType = {
  id: string | null
  numberOfStar: number | null
  text: string | null
  authorName: string | null
}

export type CustomerReviewCountAggregateOutputType = {
  id: number
  numberOfStar: number
  text: number
  authorName: number
  _all: number
}


export type CustomerReviewAvgAggregateInputType = {
  numberOfStar?: true
}

export type CustomerReviewSumAggregateInputType = {
  numberOfStar?: true
}

export type CustomerReviewMinAggregateInputType = {
  id?: true
  numberOfStar?: true
  text?: true
  authorName?: true
}

export type CustomerReviewMaxAggregateInputType = {
  id?: true
  numberOfStar?: true
  text?: true
  authorName?: true
}

export type CustomerReviewCountAggregateInputType = {
  id?: true
  numberOfStar?: true
  text?: true
  authorName?: true
  _all?: true
}

export type CustomerReviewAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which customerReview to aggregate.
   */
  where?: Prisma.customerReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customerReviews to fetch.
   */
  orderBy?: Prisma.customerReviewOrderByWithRelationInput | Prisma.customerReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.customerReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customerReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customerReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned customerReviews
  **/
  _count?: true | CustomerReviewCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CustomerReviewAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CustomerReviewSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CustomerReviewMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CustomerReviewMaxAggregateInputType
}

export type GetCustomerReviewAggregateType<T extends CustomerReviewAggregateArgs> = {
      [P in keyof T & keyof AggregateCustomerReview]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomerReview[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomerReview[P]>
}




export type customerReviewGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.customerReviewWhereInput
  orderBy?: Prisma.customerReviewOrderByWithAggregationInput | Prisma.customerReviewOrderByWithAggregationInput[]
  by: Prisma.CustomerReviewScalarFieldEnum[] | Prisma.CustomerReviewScalarFieldEnum
  having?: Prisma.customerReviewScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CustomerReviewCountAggregateInputType | true
  _avg?: CustomerReviewAvgAggregateInputType
  _sum?: CustomerReviewSumAggregateInputType
  _min?: CustomerReviewMinAggregateInputType
  _max?: CustomerReviewMaxAggregateInputType
}

export type CustomerReviewGroupByOutputType = {
  id: string
  numberOfStar: number
  text: string
  authorName: string
  _count: CustomerReviewCountAggregateOutputType | null
  _avg: CustomerReviewAvgAggregateOutputType | null
  _sum: CustomerReviewSumAggregateOutputType | null
  _min: CustomerReviewMinAggregateOutputType | null
  _max: CustomerReviewMaxAggregateOutputType | null
}

type GetCustomerReviewGroupByPayload<T extends customerReviewGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CustomerReviewGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CustomerReviewGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CustomerReviewGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CustomerReviewGroupByOutputType[P]>
      }
    >
  >



export type customerReviewWhereInput = {
  AND?: Prisma.customerReviewWhereInput | Prisma.customerReviewWhereInput[]
  OR?: Prisma.customerReviewWhereInput[]
  NOT?: Prisma.customerReviewWhereInput | Prisma.customerReviewWhereInput[]
  id?: Prisma.StringFilter<"customerReview"> | string
  numberOfStar?: Prisma.IntFilter<"customerReview"> | number
  text?: Prisma.StringFilter<"customerReview"> | string
  authorName?: Prisma.StringFilter<"customerReview"> | string
}

export type customerReviewOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  numberOfStar?: Prisma.SortOrder
  text?: Prisma.SortOrder
  authorName?: Prisma.SortOrder
}

export type customerReviewWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.customerReviewWhereInput | Prisma.customerReviewWhereInput[]
  OR?: Prisma.customerReviewWhereInput[]
  NOT?: Prisma.customerReviewWhereInput | Prisma.customerReviewWhereInput[]
  numberOfStar?: Prisma.IntFilter<"customerReview"> | number
  text?: Prisma.StringFilter<"customerReview"> | string
  authorName?: Prisma.StringFilter<"customerReview"> | string
}, "id">

export type customerReviewOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  numberOfStar?: Prisma.SortOrder
  text?: Prisma.SortOrder
  authorName?: Prisma.SortOrder
  _count?: Prisma.customerReviewCountOrderByAggregateInput
  _avg?: Prisma.customerReviewAvgOrderByAggregateInput
  _max?: Prisma.customerReviewMaxOrderByAggregateInput
  _min?: Prisma.customerReviewMinOrderByAggregateInput
  _sum?: Prisma.customerReviewSumOrderByAggregateInput
}

export type customerReviewScalarWhereWithAggregatesInput = {
  AND?: Prisma.customerReviewScalarWhereWithAggregatesInput | Prisma.customerReviewScalarWhereWithAggregatesInput[]
  OR?: Prisma.customerReviewScalarWhereWithAggregatesInput[]
  NOT?: Prisma.customerReviewScalarWhereWithAggregatesInput | Prisma.customerReviewScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"customerReview"> | string
  numberOfStar?: Prisma.IntWithAggregatesFilter<"customerReview"> | number
  text?: Prisma.StringWithAggregatesFilter<"customerReview"> | string
  authorName?: Prisma.StringWithAggregatesFilter<"customerReview"> | string
}

export type customerReviewCreateInput = {
  id?: string
  numberOfStar: number
  text: string
  authorName: string
}

export type customerReviewUncheckedCreateInput = {
  id?: string
  numberOfStar: number
  text: string
  authorName: string
}

export type customerReviewUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfStar?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  authorName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type customerReviewUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfStar?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  authorName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type customerReviewCreateManyInput = {
  id?: string
  numberOfStar: number
  text: string
  authorName: string
}

export type customerReviewUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfStar?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  authorName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type customerReviewUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfStar?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  authorName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type customerReviewCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numberOfStar?: Prisma.SortOrder
  text?: Prisma.SortOrder
  authorName?: Prisma.SortOrder
}

export type customerReviewAvgOrderByAggregateInput = {
  numberOfStar?: Prisma.SortOrder
}

export type customerReviewMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numberOfStar?: Prisma.SortOrder
  text?: Prisma.SortOrder
  authorName?: Prisma.SortOrder
}

export type customerReviewMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numberOfStar?: Prisma.SortOrder
  text?: Prisma.SortOrder
  authorName?: Prisma.SortOrder
}

export type customerReviewSumOrderByAggregateInput = {
  numberOfStar?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type customerReviewSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numberOfStar?: boolean
  text?: boolean
  authorName?: boolean
}, ExtArgs["result"]["customerReview"]>

export type customerReviewSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numberOfStar?: boolean
  text?: boolean
  authorName?: boolean
}, ExtArgs["result"]["customerReview"]>

export type customerReviewSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numberOfStar?: boolean
  text?: boolean
  authorName?: boolean
}, ExtArgs["result"]["customerReview"]>

export type customerReviewSelectScalar = {
  id?: boolean
  numberOfStar?: boolean
  text?: boolean
  authorName?: boolean
}

export type customerReviewOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "numberOfStar" | "text" | "authorName", ExtArgs["result"]["customerReview"]>

export type $customerReviewPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "customerReview"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    numberOfStar: number
    text: string
    authorName: string
  }, ExtArgs["result"]["customerReview"]>
  composites: {}
}

export type customerReviewGetPayload<S extends boolean | null | undefined | customerReviewDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$customerReviewPayload, S>

export type customerReviewCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<customerReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CustomerReviewCountAggregateInputType | true
  }

export interface customerReviewDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customerReview'], meta: { name: 'customerReview' } }
  /**
   * Find zero or one CustomerReview that matches the filter.
   * @param {customerReviewFindUniqueArgs} args - Arguments to find a CustomerReview
   * @example
   * // Get one CustomerReview
   * const customerReview = await prisma.customerReview.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends customerReviewFindUniqueArgs>(args: Prisma.SelectSubset<T, customerReviewFindUniqueArgs<ExtArgs>>): Prisma.Prisma__customerReviewClient<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CustomerReview that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {customerReviewFindUniqueOrThrowArgs} args - Arguments to find a CustomerReview
   * @example
   * // Get one CustomerReview
   * const customerReview = await prisma.customerReview.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends customerReviewFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, customerReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__customerReviewClient<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CustomerReview that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerReviewFindFirstArgs} args - Arguments to find a CustomerReview
   * @example
   * // Get one CustomerReview
   * const customerReview = await prisma.customerReview.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends customerReviewFindFirstArgs>(args?: Prisma.SelectSubset<T, customerReviewFindFirstArgs<ExtArgs>>): Prisma.Prisma__customerReviewClient<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CustomerReview that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerReviewFindFirstOrThrowArgs} args - Arguments to find a CustomerReview
   * @example
   * // Get one CustomerReview
   * const customerReview = await prisma.customerReview.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends customerReviewFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, customerReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__customerReviewClient<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CustomerReviews that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerReviewFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CustomerReviews
   * const customerReviews = await prisma.customerReview.findMany()
   * 
   * // Get first 10 CustomerReviews
   * const customerReviews = await prisma.customerReview.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const customerReviewWithIdOnly = await prisma.customerReview.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends customerReviewFindManyArgs>(args?: Prisma.SelectSubset<T, customerReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CustomerReview.
   * @param {customerReviewCreateArgs} args - Arguments to create a CustomerReview.
   * @example
   * // Create one CustomerReview
   * const CustomerReview = await prisma.customerReview.create({
   *   data: {
   *     // ... data to create a CustomerReview
   *   }
   * })
   * 
   */
  create<T extends customerReviewCreateArgs>(args: Prisma.SelectSubset<T, customerReviewCreateArgs<ExtArgs>>): Prisma.Prisma__customerReviewClient<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CustomerReviews.
   * @param {customerReviewCreateManyArgs} args - Arguments to create many CustomerReviews.
   * @example
   * // Create many CustomerReviews
   * const customerReview = await prisma.customerReview.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends customerReviewCreateManyArgs>(args?: Prisma.SelectSubset<T, customerReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CustomerReviews and returns the data saved in the database.
   * @param {customerReviewCreateManyAndReturnArgs} args - Arguments to create many CustomerReviews.
   * @example
   * // Create many CustomerReviews
   * const customerReview = await prisma.customerReview.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CustomerReviews and only return the `id`
   * const customerReviewWithIdOnly = await prisma.customerReview.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends customerReviewCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, customerReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CustomerReview.
   * @param {customerReviewDeleteArgs} args - Arguments to delete one CustomerReview.
   * @example
   * // Delete one CustomerReview
   * const CustomerReview = await prisma.customerReview.delete({
   *   where: {
   *     // ... filter to delete one CustomerReview
   *   }
   * })
   * 
   */
  delete<T extends customerReviewDeleteArgs>(args: Prisma.SelectSubset<T, customerReviewDeleteArgs<ExtArgs>>): Prisma.Prisma__customerReviewClient<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CustomerReview.
   * @param {customerReviewUpdateArgs} args - Arguments to update one CustomerReview.
   * @example
   * // Update one CustomerReview
   * const customerReview = await prisma.customerReview.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends customerReviewUpdateArgs>(args: Prisma.SelectSubset<T, customerReviewUpdateArgs<ExtArgs>>): Prisma.Prisma__customerReviewClient<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CustomerReviews.
   * @param {customerReviewDeleteManyArgs} args - Arguments to filter CustomerReviews to delete.
   * @example
   * // Delete a few CustomerReviews
   * const { count } = await prisma.customerReview.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends customerReviewDeleteManyArgs>(args?: Prisma.SelectSubset<T, customerReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CustomerReviews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerReviewUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CustomerReviews
   * const customerReview = await prisma.customerReview.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends customerReviewUpdateManyArgs>(args: Prisma.SelectSubset<T, customerReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CustomerReviews and returns the data updated in the database.
   * @param {customerReviewUpdateManyAndReturnArgs} args - Arguments to update many CustomerReviews.
   * @example
   * // Update many CustomerReviews
   * const customerReview = await prisma.customerReview.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CustomerReviews and only return the `id`
   * const customerReviewWithIdOnly = await prisma.customerReview.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends customerReviewUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, customerReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CustomerReview.
   * @param {customerReviewUpsertArgs} args - Arguments to update or create a CustomerReview.
   * @example
   * // Update or create a CustomerReview
   * const customerReview = await prisma.customerReview.upsert({
   *   create: {
   *     // ... data to create a CustomerReview
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CustomerReview we want to update
   *   }
   * })
   */
  upsert<T extends customerReviewUpsertArgs>(args: Prisma.SelectSubset<T, customerReviewUpsertArgs<ExtArgs>>): Prisma.Prisma__customerReviewClient<runtime.Types.Result.GetResult<Prisma.$customerReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CustomerReviews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerReviewCountArgs} args - Arguments to filter CustomerReviews to count.
   * @example
   * // Count the number of CustomerReviews
   * const count = await prisma.customerReview.count({
   *   where: {
   *     // ... the filter for the CustomerReviews we want to count
   *   }
   * })
  **/
  count<T extends customerReviewCountArgs>(
    args?: Prisma.Subset<T, customerReviewCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CustomerReviewCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CustomerReview.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CustomerReviewAggregateArgs>(args: Prisma.Subset<T, CustomerReviewAggregateArgs>): Prisma.PrismaPromise<GetCustomerReviewAggregateType<T>>

  /**
   * Group by CustomerReview.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customerReviewGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends customerReviewGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: customerReviewGroupByArgs['orderBy'] }
      : { orderBy?: customerReviewGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, customerReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the customerReview model
 */
readonly fields: customerReviewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for customerReview.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__customerReviewClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the customerReview model
 */
export interface customerReviewFieldRefs {
  readonly id: Prisma.FieldRef<"customerReview", 'String'>
  readonly numberOfStar: Prisma.FieldRef<"customerReview", 'Int'>
  readonly text: Prisma.FieldRef<"customerReview", 'String'>
  readonly authorName: Prisma.FieldRef<"customerReview", 'String'>
}
    

// Custom InputTypes
/**
 * customerReview findUnique
 */
export type customerReviewFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * Filter, which customerReview to fetch.
   */
  where: Prisma.customerReviewWhereUniqueInput
}

/**
 * customerReview findUniqueOrThrow
 */
export type customerReviewFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * Filter, which customerReview to fetch.
   */
  where: Prisma.customerReviewWhereUniqueInput
}

/**
 * customerReview findFirst
 */
export type customerReviewFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * Filter, which customerReview to fetch.
   */
  where?: Prisma.customerReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customerReviews to fetch.
   */
  orderBy?: Prisma.customerReviewOrderByWithRelationInput | Prisma.customerReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for customerReviews.
   */
  cursor?: Prisma.customerReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customerReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customerReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of customerReviews.
   */
  distinct?: Prisma.CustomerReviewScalarFieldEnum | Prisma.CustomerReviewScalarFieldEnum[]
}

/**
 * customerReview findFirstOrThrow
 */
export type customerReviewFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * Filter, which customerReview to fetch.
   */
  where?: Prisma.customerReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customerReviews to fetch.
   */
  orderBy?: Prisma.customerReviewOrderByWithRelationInput | Prisma.customerReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for customerReviews.
   */
  cursor?: Prisma.customerReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customerReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customerReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of customerReviews.
   */
  distinct?: Prisma.CustomerReviewScalarFieldEnum | Prisma.CustomerReviewScalarFieldEnum[]
}

/**
 * customerReview findMany
 */
export type customerReviewFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * Filter, which customerReviews to fetch.
   */
  where?: Prisma.customerReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customerReviews to fetch.
   */
  orderBy?: Prisma.customerReviewOrderByWithRelationInput | Prisma.customerReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing customerReviews.
   */
  cursor?: Prisma.customerReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customerReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customerReviews.
   */
  skip?: number
  distinct?: Prisma.CustomerReviewScalarFieldEnum | Prisma.CustomerReviewScalarFieldEnum[]
}

/**
 * customerReview create
 */
export type customerReviewCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * The data needed to create a customerReview.
   */
  data: Prisma.XOR<Prisma.customerReviewCreateInput, Prisma.customerReviewUncheckedCreateInput>
}

/**
 * customerReview createMany
 */
export type customerReviewCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many customerReviews.
   */
  data: Prisma.customerReviewCreateManyInput | Prisma.customerReviewCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * customerReview createManyAndReturn
 */
export type customerReviewCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * The data used to create many customerReviews.
   */
  data: Prisma.customerReviewCreateManyInput | Prisma.customerReviewCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * customerReview update
 */
export type customerReviewUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * The data needed to update a customerReview.
   */
  data: Prisma.XOR<Prisma.customerReviewUpdateInput, Prisma.customerReviewUncheckedUpdateInput>
  /**
   * Choose, which customerReview to update.
   */
  where: Prisma.customerReviewWhereUniqueInput
}

/**
 * customerReview updateMany
 */
export type customerReviewUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update customerReviews.
   */
  data: Prisma.XOR<Prisma.customerReviewUpdateManyMutationInput, Prisma.customerReviewUncheckedUpdateManyInput>
  /**
   * Filter which customerReviews to update
   */
  where?: Prisma.customerReviewWhereInput
  /**
   * Limit how many customerReviews to update.
   */
  limit?: number
}

/**
 * customerReview updateManyAndReturn
 */
export type customerReviewUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * The data used to update customerReviews.
   */
  data: Prisma.XOR<Prisma.customerReviewUpdateManyMutationInput, Prisma.customerReviewUncheckedUpdateManyInput>
  /**
   * Filter which customerReviews to update
   */
  where?: Prisma.customerReviewWhereInput
  /**
   * Limit how many customerReviews to update.
   */
  limit?: number
}

/**
 * customerReview upsert
 */
export type customerReviewUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * The filter to search for the customerReview to update in case it exists.
   */
  where: Prisma.customerReviewWhereUniqueInput
  /**
   * In case the customerReview found by the `where` argument doesn't exist, create a new customerReview with this data.
   */
  create: Prisma.XOR<Prisma.customerReviewCreateInput, Prisma.customerReviewUncheckedCreateInput>
  /**
   * In case the customerReview was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.customerReviewUpdateInput, Prisma.customerReviewUncheckedUpdateInput>
}

/**
 * customerReview delete
 */
export type customerReviewDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
  /**
   * Filter which customerReview to delete.
   */
  where: Prisma.customerReviewWhereUniqueInput
}

/**
 * customerReview deleteMany
 */
export type customerReviewDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which customerReviews to delete
   */
  where?: Prisma.customerReviewWhereInput
  /**
   * Limit how many customerReviews to delete.
   */
  limit?: number
}

/**
 * customerReview without action
 */
export type customerReviewDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customerReview
   */
  select?: Prisma.customerReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customerReview
   */
  omit?: Prisma.customerReviewOmit<ExtArgs> | null
}
