
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `websiteSection` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model websiteSection
 * 
 */
export type websiteSectionModel = runtime.Types.Result.DefaultSelection<Prisma.$websiteSectionPayload>

export type AggregateWebsiteSection = {
  _count: WebsiteSectionCountAggregateOutputType | null
  _avg: WebsiteSectionAvgAggregateOutputType | null
  _sum: WebsiteSectionSumAggregateOutputType | null
  _min: WebsiteSectionMinAggregateOutputType | null
  _max: WebsiteSectionMaxAggregateOutputType | null
}

export type WebsiteSectionAvgAggregateOutputType = {
  order: number | null
}

export type WebsiteSectionSumAggregateOutputType = {
  order: number | null
}

export type WebsiteSectionMinAggregateOutputType = {
  id: string | null
  order: number | null
  title: string | null
}

export type WebsiteSectionMaxAggregateOutputType = {
  id: string | null
  order: number | null
  title: string | null
}

export type WebsiteSectionCountAggregateOutputType = {
  id: number
  order: number
  title: number
  content: number
  _all: number
}


export type WebsiteSectionAvgAggregateInputType = {
  order?: true
}

export type WebsiteSectionSumAggregateInputType = {
  order?: true
}

export type WebsiteSectionMinAggregateInputType = {
  id?: true
  order?: true
  title?: true
}

export type WebsiteSectionMaxAggregateInputType = {
  id?: true
  order?: true
  title?: true
}

export type WebsiteSectionCountAggregateInputType = {
  id?: true
  order?: true
  title?: true
  content?: true
  _all?: true
}

export type WebsiteSectionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which websiteSection to aggregate.
   */
  where?: Prisma.websiteSectionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of websiteSections to fetch.
   */
  orderBy?: Prisma.websiteSectionOrderByWithRelationInput | Prisma.websiteSectionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.websiteSectionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` websiteSections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` websiteSections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned websiteSections
  **/
  _count?: true | WebsiteSectionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WebsiteSectionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WebsiteSectionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WebsiteSectionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WebsiteSectionMaxAggregateInputType
}

export type GetWebsiteSectionAggregateType<T extends WebsiteSectionAggregateArgs> = {
      [P in keyof T & keyof AggregateWebsiteSection]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWebsiteSection[P]>
    : Prisma.GetScalarType<T[P], AggregateWebsiteSection[P]>
}




export type websiteSectionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.websiteSectionWhereInput
  orderBy?: Prisma.websiteSectionOrderByWithAggregationInput | Prisma.websiteSectionOrderByWithAggregationInput[]
  by: Prisma.WebsiteSectionScalarFieldEnum[] | Prisma.WebsiteSectionScalarFieldEnum
  having?: Prisma.websiteSectionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WebsiteSectionCountAggregateInputType | true
  _avg?: WebsiteSectionAvgAggregateInputType
  _sum?: WebsiteSectionSumAggregateInputType
  _min?: WebsiteSectionMinAggregateInputType
  _max?: WebsiteSectionMaxAggregateInputType
}

export type WebsiteSectionGroupByOutputType = {
  id: string
  order: number
  title: string
  content: runtime.JsonValue
  _count: WebsiteSectionCountAggregateOutputType | null
  _avg: WebsiteSectionAvgAggregateOutputType | null
  _sum: WebsiteSectionSumAggregateOutputType | null
  _min: WebsiteSectionMinAggregateOutputType | null
  _max: WebsiteSectionMaxAggregateOutputType | null
}

type GetWebsiteSectionGroupByPayload<T extends websiteSectionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WebsiteSectionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WebsiteSectionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WebsiteSectionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WebsiteSectionGroupByOutputType[P]>
      }
    >
  >



export type websiteSectionWhereInput = {
  AND?: Prisma.websiteSectionWhereInput | Prisma.websiteSectionWhereInput[]
  OR?: Prisma.websiteSectionWhereInput[]
  NOT?: Prisma.websiteSectionWhereInput | Prisma.websiteSectionWhereInput[]
  id?: Prisma.StringFilter<"websiteSection"> | string
  order?: Prisma.IntFilter<"websiteSection"> | number
  title?: Prisma.StringFilter<"websiteSection"> | string
  content?: Prisma.JsonFilter<"websiteSection">
}

export type websiteSectionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type websiteSectionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  order?: number
  title?: string
  AND?: Prisma.websiteSectionWhereInput | Prisma.websiteSectionWhereInput[]
  OR?: Prisma.websiteSectionWhereInput[]
  NOT?: Prisma.websiteSectionWhereInput | Prisma.websiteSectionWhereInput[]
  content?: Prisma.JsonFilter<"websiteSection">
}, "id" | "order" | "title">

export type websiteSectionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  _count?: Prisma.websiteSectionCountOrderByAggregateInput
  _avg?: Prisma.websiteSectionAvgOrderByAggregateInput
  _max?: Prisma.websiteSectionMaxOrderByAggregateInput
  _min?: Prisma.websiteSectionMinOrderByAggregateInput
  _sum?: Prisma.websiteSectionSumOrderByAggregateInput
}

export type websiteSectionScalarWhereWithAggregatesInput = {
  AND?: Prisma.websiteSectionScalarWhereWithAggregatesInput | Prisma.websiteSectionScalarWhereWithAggregatesInput[]
  OR?: Prisma.websiteSectionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.websiteSectionScalarWhereWithAggregatesInput | Prisma.websiteSectionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"websiteSection"> | string
  order?: Prisma.IntWithAggregatesFilter<"websiteSection"> | number
  title?: Prisma.StringWithAggregatesFilter<"websiteSection"> | string
  content?: Prisma.JsonWithAggregatesFilter<"websiteSection">
}

export type websiteSectionCreateInput = {
  id?: string
  order: number
  title: string
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type websiteSectionUncheckedCreateInput = {
  id?: string
  order: number
  title: string
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type websiteSectionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type websiteSectionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type websiteSectionCreateManyInput = {
  id?: string
  order: number
  title: string
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type websiteSectionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type websiteSectionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type websiteSectionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type websiteSectionAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type websiteSectionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
  title?: Prisma.SortOrder
}

export type websiteSectionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
  title?: Prisma.SortOrder
}

export type websiteSectionSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
}



export type websiteSectionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  order?: boolean
  title?: boolean
  content?: boolean
}, ExtArgs["result"]["websiteSection"]>

export type websiteSectionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  order?: boolean
  title?: boolean
  content?: boolean
}, ExtArgs["result"]["websiteSection"]>

export type websiteSectionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  order?: boolean
  title?: boolean
  content?: boolean
}, ExtArgs["result"]["websiteSection"]>

export type websiteSectionSelectScalar = {
  id?: boolean
  order?: boolean
  title?: boolean
  content?: boolean
}

export type websiteSectionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "order" | "title" | "content", ExtArgs["result"]["websiteSection"]>

export type $websiteSectionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "websiteSection"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    order: number
    title: string
    content: runtime.JsonValue
  }, ExtArgs["result"]["websiteSection"]>
  composites: {}
}

export type websiteSectionGetPayload<S extends boolean | null | undefined | websiteSectionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload, S>

export type websiteSectionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<websiteSectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WebsiteSectionCountAggregateInputType | true
  }

export interface websiteSectionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['websiteSection'], meta: { name: 'websiteSection' } }
  /**
   * Find zero or one WebsiteSection that matches the filter.
   * @param {websiteSectionFindUniqueArgs} args - Arguments to find a WebsiteSection
   * @example
   * // Get one WebsiteSection
   * const websiteSection = await prisma.websiteSection.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends websiteSectionFindUniqueArgs>(args: Prisma.SelectSubset<T, websiteSectionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__websiteSectionClient<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WebsiteSection that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {websiteSectionFindUniqueOrThrowArgs} args - Arguments to find a WebsiteSection
   * @example
   * // Get one WebsiteSection
   * const websiteSection = await prisma.websiteSection.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends websiteSectionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, websiteSectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__websiteSectionClient<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebsiteSection that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websiteSectionFindFirstArgs} args - Arguments to find a WebsiteSection
   * @example
   * // Get one WebsiteSection
   * const websiteSection = await prisma.websiteSection.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends websiteSectionFindFirstArgs>(args?: Prisma.SelectSubset<T, websiteSectionFindFirstArgs<ExtArgs>>): Prisma.Prisma__websiteSectionClient<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WebsiteSection that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websiteSectionFindFirstOrThrowArgs} args - Arguments to find a WebsiteSection
   * @example
   * // Get one WebsiteSection
   * const websiteSection = await prisma.websiteSection.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends websiteSectionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, websiteSectionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__websiteSectionClient<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WebsiteSections that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websiteSectionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WebsiteSections
   * const websiteSections = await prisma.websiteSection.findMany()
   * 
   * // Get first 10 WebsiteSections
   * const websiteSections = await prisma.websiteSection.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const websiteSectionWithIdOnly = await prisma.websiteSection.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends websiteSectionFindManyArgs>(args?: Prisma.SelectSubset<T, websiteSectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WebsiteSection.
   * @param {websiteSectionCreateArgs} args - Arguments to create a WebsiteSection.
   * @example
   * // Create one WebsiteSection
   * const WebsiteSection = await prisma.websiteSection.create({
   *   data: {
   *     // ... data to create a WebsiteSection
   *   }
   * })
   * 
   */
  create<T extends websiteSectionCreateArgs>(args: Prisma.SelectSubset<T, websiteSectionCreateArgs<ExtArgs>>): Prisma.Prisma__websiteSectionClient<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WebsiteSections.
   * @param {websiteSectionCreateManyArgs} args - Arguments to create many WebsiteSections.
   * @example
   * // Create many WebsiteSections
   * const websiteSection = await prisma.websiteSection.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends websiteSectionCreateManyArgs>(args?: Prisma.SelectSubset<T, websiteSectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WebsiteSections and returns the data saved in the database.
   * @param {websiteSectionCreateManyAndReturnArgs} args - Arguments to create many WebsiteSections.
   * @example
   * // Create many WebsiteSections
   * const websiteSection = await prisma.websiteSection.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WebsiteSections and only return the `id`
   * const websiteSectionWithIdOnly = await prisma.websiteSection.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends websiteSectionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, websiteSectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WebsiteSection.
   * @param {websiteSectionDeleteArgs} args - Arguments to delete one WebsiteSection.
   * @example
   * // Delete one WebsiteSection
   * const WebsiteSection = await prisma.websiteSection.delete({
   *   where: {
   *     // ... filter to delete one WebsiteSection
   *   }
   * })
   * 
   */
  delete<T extends websiteSectionDeleteArgs>(args: Prisma.SelectSubset<T, websiteSectionDeleteArgs<ExtArgs>>): Prisma.Prisma__websiteSectionClient<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WebsiteSection.
   * @param {websiteSectionUpdateArgs} args - Arguments to update one WebsiteSection.
   * @example
   * // Update one WebsiteSection
   * const websiteSection = await prisma.websiteSection.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends websiteSectionUpdateArgs>(args: Prisma.SelectSubset<T, websiteSectionUpdateArgs<ExtArgs>>): Prisma.Prisma__websiteSectionClient<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WebsiteSections.
   * @param {websiteSectionDeleteManyArgs} args - Arguments to filter WebsiteSections to delete.
   * @example
   * // Delete a few WebsiteSections
   * const { count } = await prisma.websiteSection.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends websiteSectionDeleteManyArgs>(args?: Prisma.SelectSubset<T, websiteSectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebsiteSections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websiteSectionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WebsiteSections
   * const websiteSection = await prisma.websiteSection.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends websiteSectionUpdateManyArgs>(args: Prisma.SelectSubset<T, websiteSectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WebsiteSections and returns the data updated in the database.
   * @param {websiteSectionUpdateManyAndReturnArgs} args - Arguments to update many WebsiteSections.
   * @example
   * // Update many WebsiteSections
   * const websiteSection = await prisma.websiteSection.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WebsiteSections and only return the `id`
   * const websiteSectionWithIdOnly = await prisma.websiteSection.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends websiteSectionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, websiteSectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WebsiteSection.
   * @param {websiteSectionUpsertArgs} args - Arguments to update or create a WebsiteSection.
   * @example
   * // Update or create a WebsiteSection
   * const websiteSection = await prisma.websiteSection.upsert({
   *   create: {
   *     // ... data to create a WebsiteSection
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WebsiteSection we want to update
   *   }
   * })
   */
  upsert<T extends websiteSectionUpsertArgs>(args: Prisma.SelectSubset<T, websiteSectionUpsertArgs<ExtArgs>>): Prisma.Prisma__websiteSectionClient<runtime.Types.Result.GetResult<Prisma.$websiteSectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WebsiteSections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websiteSectionCountArgs} args - Arguments to filter WebsiteSections to count.
   * @example
   * // Count the number of WebsiteSections
   * const count = await prisma.websiteSection.count({
   *   where: {
   *     // ... the filter for the WebsiteSections we want to count
   *   }
   * })
  **/
  count<T extends websiteSectionCountArgs>(
    args?: Prisma.Subset<T, websiteSectionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WebsiteSectionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WebsiteSection.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebsiteSectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WebsiteSectionAggregateArgs>(args: Prisma.Subset<T, WebsiteSectionAggregateArgs>): Prisma.PrismaPromise<GetWebsiteSectionAggregateType<T>>

  /**
   * Group by WebsiteSection.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websiteSectionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends websiteSectionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: websiteSectionGroupByArgs['orderBy'] }
      : { orderBy?: websiteSectionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, websiteSectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebsiteSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the websiteSection model
 */
readonly fields: websiteSectionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for websiteSection.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__websiteSectionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the websiteSection model
 */
export interface websiteSectionFieldRefs {
  readonly id: Prisma.FieldRef<"websiteSection", 'String'>
  readonly order: Prisma.FieldRef<"websiteSection", 'Int'>
  readonly title: Prisma.FieldRef<"websiteSection", 'String'>
  readonly content: Prisma.FieldRef<"websiteSection", 'Json'>
}
    

// Custom InputTypes
/**
 * websiteSection findUnique
 */
export type websiteSectionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * Filter, which websiteSection to fetch.
   */
  where: Prisma.websiteSectionWhereUniqueInput
}

/**
 * websiteSection findUniqueOrThrow
 */
export type websiteSectionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * Filter, which websiteSection to fetch.
   */
  where: Prisma.websiteSectionWhereUniqueInput
}

/**
 * websiteSection findFirst
 */
export type websiteSectionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * Filter, which websiteSection to fetch.
   */
  where?: Prisma.websiteSectionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of websiteSections to fetch.
   */
  orderBy?: Prisma.websiteSectionOrderByWithRelationInput | Prisma.websiteSectionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for websiteSections.
   */
  cursor?: Prisma.websiteSectionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` websiteSections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` websiteSections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of websiteSections.
   */
  distinct?: Prisma.WebsiteSectionScalarFieldEnum | Prisma.WebsiteSectionScalarFieldEnum[]
}

/**
 * websiteSection findFirstOrThrow
 */
export type websiteSectionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * Filter, which websiteSection to fetch.
   */
  where?: Prisma.websiteSectionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of websiteSections to fetch.
   */
  orderBy?: Prisma.websiteSectionOrderByWithRelationInput | Prisma.websiteSectionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for websiteSections.
   */
  cursor?: Prisma.websiteSectionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` websiteSections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` websiteSections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of websiteSections.
   */
  distinct?: Prisma.WebsiteSectionScalarFieldEnum | Prisma.WebsiteSectionScalarFieldEnum[]
}

/**
 * websiteSection findMany
 */
export type websiteSectionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * Filter, which websiteSections to fetch.
   */
  where?: Prisma.websiteSectionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of websiteSections to fetch.
   */
  orderBy?: Prisma.websiteSectionOrderByWithRelationInput | Prisma.websiteSectionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing websiteSections.
   */
  cursor?: Prisma.websiteSectionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` websiteSections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` websiteSections.
   */
  skip?: number
  distinct?: Prisma.WebsiteSectionScalarFieldEnum | Prisma.WebsiteSectionScalarFieldEnum[]
}

/**
 * websiteSection create
 */
export type websiteSectionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * The data needed to create a websiteSection.
   */
  data: Prisma.XOR<Prisma.websiteSectionCreateInput, Prisma.websiteSectionUncheckedCreateInput>
}

/**
 * websiteSection createMany
 */
export type websiteSectionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many websiteSections.
   */
  data: Prisma.websiteSectionCreateManyInput | Prisma.websiteSectionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * websiteSection createManyAndReturn
 */
export type websiteSectionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * The data used to create many websiteSections.
   */
  data: Prisma.websiteSectionCreateManyInput | Prisma.websiteSectionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * websiteSection update
 */
export type websiteSectionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * The data needed to update a websiteSection.
   */
  data: Prisma.XOR<Prisma.websiteSectionUpdateInput, Prisma.websiteSectionUncheckedUpdateInput>
  /**
   * Choose, which websiteSection to update.
   */
  where: Prisma.websiteSectionWhereUniqueInput
}

/**
 * websiteSection updateMany
 */
export type websiteSectionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update websiteSections.
   */
  data: Prisma.XOR<Prisma.websiteSectionUpdateManyMutationInput, Prisma.websiteSectionUncheckedUpdateManyInput>
  /**
   * Filter which websiteSections to update
   */
  where?: Prisma.websiteSectionWhereInput
  /**
   * Limit how many websiteSections to update.
   */
  limit?: number
}

/**
 * websiteSection updateManyAndReturn
 */
export type websiteSectionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * The data used to update websiteSections.
   */
  data: Prisma.XOR<Prisma.websiteSectionUpdateManyMutationInput, Prisma.websiteSectionUncheckedUpdateManyInput>
  /**
   * Filter which websiteSections to update
   */
  where?: Prisma.websiteSectionWhereInput
  /**
   * Limit how many websiteSections to update.
   */
  limit?: number
}

/**
 * websiteSection upsert
 */
export type websiteSectionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * The filter to search for the websiteSection to update in case it exists.
   */
  where: Prisma.websiteSectionWhereUniqueInput
  /**
   * In case the websiteSection found by the `where` argument doesn't exist, create a new websiteSection with this data.
   */
  create: Prisma.XOR<Prisma.websiteSectionCreateInput, Prisma.websiteSectionUncheckedCreateInput>
  /**
   * In case the websiteSection was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.websiteSectionUpdateInput, Prisma.websiteSectionUncheckedUpdateInput>
}

/**
 * websiteSection delete
 */
export type websiteSectionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
  /**
   * Filter which websiteSection to delete.
   */
  where: Prisma.websiteSectionWhereUniqueInput
}

/**
 * websiteSection deleteMany
 */
export type websiteSectionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which websiteSections to delete
   */
  where?: Prisma.websiteSectionWhereInput
  /**
   * Limit how many websiteSections to delete.
   */
  limit?: number
}

/**
 * websiteSection without action
 */
export type websiteSectionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websiteSection
   */
  select?: Prisma.websiteSectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websiteSection
   */
  omit?: Prisma.websiteSectionOmit<ExtArgs> | null
}
